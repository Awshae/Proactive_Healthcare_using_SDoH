import numpy as np
import tensorflow as tf
from tensorflow.keras import layers, models, optimizers
from tensorflow.keras.preprocessing.image import ImageDataGenerator, img_to_array, load_img
from tensorflow.keras.applications import VGG16
import os
from PIL import Image
import io
import matplotlib.pyplot as plt

# 1. Data Preparation (Simplified Example - Replace with your dataset)

def create_dataset(image_dir, target_size=(256, 256), batch_size=32):
    """
    Creates a dataset suitable for training a colorization model.
    """
    datagen = ImageDataGenerator(rescale=1./255)

    def generator():
        for filename in os.listdir(image_dir):
            if filename.lower().endswith(('.png', '.jpg', '.jpeg')):
                img_path = os.path.join(image_dir, filename)
                img = load_img(img_path, target_size=target_size)
                img_array = img_to_array(img)
                lab_img = tf.image.rgb_to_lab(img_array)
                l_channel = lab_img[:, :, 0:1] / 100.0  # Normalize L channel
                ab_channels = lab_img[:, :, 1:] / 127.0  # Normalize AB channels
                yield l_channel, ab_channels

    dataset = tf.data.Dataset.from_generator(
        generator,
        output_signature=(
            tf.TensorSpec(shape=(target_size[0], target_size[1], 1), dtype=tf.float32),
            tf.TensorSpec(shape=(target_size[0], target_size[1], 2), dtype=tf.float32)
        )
    )
    dataset = dataset.batch(batch_size).prefetch(tf.data.AUTOTUNE)
    return dataset

# Replace 'your_image_directory' with the path to your image dataset
image_dir = 'your_image_directory' #create a directory and put your images there.
dataset = create_dataset(image_dir)

# 2. Build the Model

def build_colorization_model(input_shape=(256, 256, 1)):
    """
    Builds a neural network model for image colorization.
    """
    inputs = layers.Input(shape=input_shape)

    # Encoder
    conv1 = layers.Conv2D(64, 3, activation='relu', padding='same')(inputs)
    conv2 = layers.Conv2D(128, 3, activation='relu', padding='same', strides=2)(conv1)
    conv3 = layers.Conv2D(256, 3, activation='relu', padding='same', strides=2)(conv2)
    conv4 = layers.Conv2D(512, 3, activation='relu', padding='same', strides=2)(conv3)

    # Decoder
    up1 = layers.UpSampling2D(size=(2, 2))(conv4)
    conv5 = layers.Conv2D(256, 3, activation='relu', padding='same')(up1)
    up2 = layers.UpSampling2D(size=(2, 2))(conv5)
    conv6 = layers.Conv2D(128, 3, activation='relu', padding='same')(up2)
    up3 = layers.UpSampling2D(size=(2, 2))(conv6)
    conv7 = layers.Conv2D(64, 3, activation='relu', padding='same')(up3)
    outputs = layers.Conv2D(2, 3, activation='tanh', padding='same')(conv7)

    model = models.Model(inputs=inputs, outputs=outputs)
    return model

model = build_colorization_model()
model.compile(optimizer=optimizers.Adam(learning_rate=0.001), loss='mse')

# 3. Train the Model

model.fit(dataset, epochs=10) #adjust epochs based on your dataset size.

# 4. Colorization Function

def colorize_image(gray_img_path, model, target_size=(256, 256)):
    """
    Colorizes a grayscale image using the trained model.
    """
    gray_img = load_img(gray_img_path, color_mode='grayscale', target_size=target_size)
    gray_img_array = img_to_array(gray_img) / 255.0
    gray_img_array = np.expand_dims(gray_img_array, axis=0)

    predicted_ab = model.predict(gray_img_array)
    predicted_ab = predicted_ab[0] * 127.0

    gray_img_array = gray_img_array[0] * 100.0
    lab_img = np.concatenate((gray_img_array, predicted_ab), axis=-1)
    rgb_img = tf.image.lab_to_rgb(lab_img)
    rgb_img = (rgb_img.numpy() * 255).astype(np.uint8)

    return Image.fromarray(rgb_img)

# Example usage (after training):
gray_image_path = 'path_to_your_grayscale_image.jpg' #put a grayscale image here.
colorized_image = colorize_image(gray_image_path, model)

# Display the colorized image
plt.imshow(colorized_image)
plt.axis('off')
plt.show()

#Save the image.
colorized_image.save("colorized_image.jpg")

# 5. Simple Web App (Conceptual - Requires Flask or similar)
"""
(Flask Example snippet)
@app.route('/colorize', methods=['POST'])
def colorize():
    if 'file' not in request.files:
        return 'No file part'
    file = request.files['file']
    if file.filename == '':
        return 'No selected file'
    if file:
        img = Image.open(io.BytesIO(file.read()))
        img.save('temp_gray.jpg')
        colorized = colorize_image('temp_gray.jpg', model)
        img_io = io.BytesIO()
        colorized.save(img_io, 'JPEG', quality=70)
        img_io.seek(0)
        return send_file(img_io, mimetype='image/jpeg')
"""
